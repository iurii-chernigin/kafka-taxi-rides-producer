/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package schemaregistry;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class GreenRideRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1968195171104294365L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GreenRideRecord\",\"namespace\":\"schemaregistry\",\"fields\":[{\"name\":\"pickup_datetime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"dropoff_datetime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"vendor_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"pickup_location_id\",\"type\":\"int\"},{\"name\":\"dropoff_location_id\",\"type\":\"int\"},{\"name\":\"sended_to_kafka_ts\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<GreenRideRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<GreenRideRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<GreenRideRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<GreenRideRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<GreenRideRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this GreenRideRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a GreenRideRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a GreenRideRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static GreenRideRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String pickup_datetime;
  private java.lang.String dropoff_datetime;
  private java.lang.String vendor_id;
  private int pickup_location_id;
  private int dropoff_location_id;
  private int sended_to_kafka_ts;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GreenRideRecord() {}

  /**
   * All-args constructor.
   * @param pickup_datetime The new value for pickup_datetime
   * @param dropoff_datetime The new value for dropoff_datetime
   * @param vendor_id The new value for vendor_id
   * @param pickup_location_id The new value for pickup_location_id
   * @param dropoff_location_id The new value for dropoff_location_id
   * @param sended_to_kafka_ts The new value for sended_to_kafka_ts
   */
  public GreenRideRecord(java.lang.String pickup_datetime, java.lang.String dropoff_datetime, java.lang.String vendor_id, java.lang.Integer pickup_location_id, java.lang.Integer dropoff_location_id, java.lang.Integer sended_to_kafka_ts) {
    this.pickup_datetime = pickup_datetime;
    this.dropoff_datetime = dropoff_datetime;
    this.vendor_id = vendor_id;
    this.pickup_location_id = pickup_location_id;
    this.dropoff_location_id = dropoff_location_id;
    this.sended_to_kafka_ts = sended_to_kafka_ts;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return pickup_datetime;
    case 1: return dropoff_datetime;
    case 2: return vendor_id;
    case 3: return pickup_location_id;
    case 4: return dropoff_location_id;
    case 5: return sended_to_kafka_ts;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: pickup_datetime = value$ != null ? value$.toString() : null; break;
    case 1: dropoff_datetime = value$ != null ? value$.toString() : null; break;
    case 2: vendor_id = value$ != null ? value$.toString() : null; break;
    case 3: pickup_location_id = (java.lang.Integer)value$; break;
    case 4: dropoff_location_id = (java.lang.Integer)value$; break;
    case 5: sended_to_kafka_ts = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'pickup_datetime' field.
   * @return The value of the 'pickup_datetime' field.
   */
  public java.lang.String getPickupDatetime() {
    return pickup_datetime;
  }


  /**
   * Sets the value of the 'pickup_datetime' field.
   * @param value the value to set.
   */
  public void setPickupDatetime(java.lang.String value) {
    this.pickup_datetime = value;
  }

  /**
   * Gets the value of the 'dropoff_datetime' field.
   * @return The value of the 'dropoff_datetime' field.
   */
  public java.lang.String getDropoffDatetime() {
    return dropoff_datetime;
  }


  /**
   * Sets the value of the 'dropoff_datetime' field.
   * @param value the value to set.
   */
  public void setDropoffDatetime(java.lang.String value) {
    this.dropoff_datetime = value;
  }

  /**
   * Gets the value of the 'vendor_id' field.
   * @return The value of the 'vendor_id' field.
   */
  public java.lang.String getVendorId() {
    return vendor_id;
  }


  /**
   * Sets the value of the 'vendor_id' field.
   * @param value the value to set.
   */
  public void setVendorId(java.lang.String value) {
    this.vendor_id = value;
  }

  /**
   * Gets the value of the 'pickup_location_id' field.
   * @return The value of the 'pickup_location_id' field.
   */
  public int getPickupLocationId() {
    return pickup_location_id;
  }


  /**
   * Sets the value of the 'pickup_location_id' field.
   * @param value the value to set.
   */
  public void setPickupLocationId(int value) {
    this.pickup_location_id = value;
  }

  /**
   * Gets the value of the 'dropoff_location_id' field.
   * @return The value of the 'dropoff_location_id' field.
   */
  public int getDropoffLocationId() {
    return dropoff_location_id;
  }


  /**
   * Sets the value of the 'dropoff_location_id' field.
   * @param value the value to set.
   */
  public void setDropoffLocationId(int value) {
    this.dropoff_location_id = value;
  }

  /**
   * Gets the value of the 'sended_to_kafka_ts' field.
   * @return The value of the 'sended_to_kafka_ts' field.
   */
  public int getSendedToKafkaTs() {
    return sended_to_kafka_ts;
  }


  /**
   * Sets the value of the 'sended_to_kafka_ts' field.
   * @param value the value to set.
   */
  public void setSendedToKafkaTs(int value) {
    this.sended_to_kafka_ts = value;
  }

  /**
   * Creates a new GreenRideRecord RecordBuilder.
   * @return A new GreenRideRecord RecordBuilder
   */
  public static schemaregistry.GreenRideRecord.Builder newBuilder() {
    return new schemaregistry.GreenRideRecord.Builder();
  }

  /**
   * Creates a new GreenRideRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GreenRideRecord RecordBuilder
   */
  public static schemaregistry.GreenRideRecord.Builder newBuilder(schemaregistry.GreenRideRecord.Builder other) {
    if (other == null) {
      return new schemaregistry.GreenRideRecord.Builder();
    } else {
      return new schemaregistry.GreenRideRecord.Builder(other);
    }
  }

  /**
   * Creates a new GreenRideRecord RecordBuilder by copying an existing GreenRideRecord instance.
   * @param other The existing instance to copy.
   * @return A new GreenRideRecord RecordBuilder
   */
  public static schemaregistry.GreenRideRecord.Builder newBuilder(schemaregistry.GreenRideRecord other) {
    if (other == null) {
      return new schemaregistry.GreenRideRecord.Builder();
    } else {
      return new schemaregistry.GreenRideRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for GreenRideRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GreenRideRecord>
    implements org.apache.avro.data.RecordBuilder<GreenRideRecord> {

    private java.lang.String pickup_datetime;
    private java.lang.String dropoff_datetime;
    private java.lang.String vendor_id;
    private int pickup_location_id;
    private int dropoff_location_id;
    private int sended_to_kafka_ts;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(schemaregistry.GreenRideRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.pickup_datetime)) {
        this.pickup_datetime = data().deepCopy(fields()[0].schema(), other.pickup_datetime);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.dropoff_datetime)) {
        this.dropoff_datetime = data().deepCopy(fields()[1].schema(), other.dropoff_datetime);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.vendor_id)) {
        this.vendor_id = data().deepCopy(fields()[2].schema(), other.vendor_id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.pickup_location_id)) {
        this.pickup_location_id = data().deepCopy(fields()[3].schema(), other.pickup_location_id);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.dropoff_location_id)) {
        this.dropoff_location_id = data().deepCopy(fields()[4].schema(), other.dropoff_location_id);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.sended_to_kafka_ts)) {
        this.sended_to_kafka_ts = data().deepCopy(fields()[5].schema(), other.sended_to_kafka_ts);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing GreenRideRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(schemaregistry.GreenRideRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.pickup_datetime)) {
        this.pickup_datetime = data().deepCopy(fields()[0].schema(), other.pickup_datetime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dropoff_datetime)) {
        this.dropoff_datetime = data().deepCopy(fields()[1].schema(), other.dropoff_datetime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.vendor_id)) {
        this.vendor_id = data().deepCopy(fields()[2].schema(), other.vendor_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.pickup_location_id)) {
        this.pickup_location_id = data().deepCopy(fields()[3].schema(), other.pickup_location_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dropoff_location_id)) {
        this.dropoff_location_id = data().deepCopy(fields()[4].schema(), other.dropoff_location_id);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sended_to_kafka_ts)) {
        this.sended_to_kafka_ts = data().deepCopy(fields()[5].schema(), other.sended_to_kafka_ts);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'pickup_datetime' field.
      * @return The value.
      */
    public java.lang.String getPickupDatetime() {
      return pickup_datetime;
    }


    /**
      * Sets the value of the 'pickup_datetime' field.
      * @param value The value of 'pickup_datetime'.
      * @return This builder.
      */
    public schemaregistry.GreenRideRecord.Builder setPickupDatetime(java.lang.String value) {
      validate(fields()[0], value);
      this.pickup_datetime = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'pickup_datetime' field has been set.
      * @return True if the 'pickup_datetime' field has been set, false otherwise.
      */
    public boolean hasPickupDatetime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'pickup_datetime' field.
      * @return This builder.
      */
    public schemaregistry.GreenRideRecord.Builder clearPickupDatetime() {
      pickup_datetime = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'dropoff_datetime' field.
      * @return The value.
      */
    public java.lang.String getDropoffDatetime() {
      return dropoff_datetime;
    }


    /**
      * Sets the value of the 'dropoff_datetime' field.
      * @param value The value of 'dropoff_datetime'.
      * @return This builder.
      */
    public schemaregistry.GreenRideRecord.Builder setDropoffDatetime(java.lang.String value) {
      validate(fields()[1], value);
      this.dropoff_datetime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'dropoff_datetime' field has been set.
      * @return True if the 'dropoff_datetime' field has been set, false otherwise.
      */
    public boolean hasDropoffDatetime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'dropoff_datetime' field.
      * @return This builder.
      */
    public schemaregistry.GreenRideRecord.Builder clearDropoffDatetime() {
      dropoff_datetime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'vendor_id' field.
      * @return The value.
      */
    public java.lang.String getVendorId() {
      return vendor_id;
    }


    /**
      * Sets the value of the 'vendor_id' field.
      * @param value The value of 'vendor_id'.
      * @return This builder.
      */
    public schemaregistry.GreenRideRecord.Builder setVendorId(java.lang.String value) {
      validate(fields()[2], value);
      this.vendor_id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'vendor_id' field has been set.
      * @return True if the 'vendor_id' field has been set, false otherwise.
      */
    public boolean hasVendorId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'vendor_id' field.
      * @return This builder.
      */
    public schemaregistry.GreenRideRecord.Builder clearVendorId() {
      vendor_id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'pickup_location_id' field.
      * @return The value.
      */
    public int getPickupLocationId() {
      return pickup_location_id;
    }


    /**
      * Sets the value of the 'pickup_location_id' field.
      * @param value The value of 'pickup_location_id'.
      * @return This builder.
      */
    public schemaregistry.GreenRideRecord.Builder setPickupLocationId(int value) {
      validate(fields()[3], value);
      this.pickup_location_id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'pickup_location_id' field has been set.
      * @return True if the 'pickup_location_id' field has been set, false otherwise.
      */
    public boolean hasPickupLocationId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'pickup_location_id' field.
      * @return This builder.
      */
    public schemaregistry.GreenRideRecord.Builder clearPickupLocationId() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'dropoff_location_id' field.
      * @return The value.
      */
    public int getDropoffLocationId() {
      return dropoff_location_id;
    }


    /**
      * Sets the value of the 'dropoff_location_id' field.
      * @param value The value of 'dropoff_location_id'.
      * @return This builder.
      */
    public schemaregistry.GreenRideRecord.Builder setDropoffLocationId(int value) {
      validate(fields()[4], value);
      this.dropoff_location_id = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'dropoff_location_id' field has been set.
      * @return True if the 'dropoff_location_id' field has been set, false otherwise.
      */
    public boolean hasDropoffLocationId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'dropoff_location_id' field.
      * @return This builder.
      */
    public schemaregistry.GreenRideRecord.Builder clearDropoffLocationId() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'sended_to_kafka_ts' field.
      * @return The value.
      */
    public int getSendedToKafkaTs() {
      return sended_to_kafka_ts;
    }


    /**
      * Sets the value of the 'sended_to_kafka_ts' field.
      * @param value The value of 'sended_to_kafka_ts'.
      * @return This builder.
      */
    public schemaregistry.GreenRideRecord.Builder setSendedToKafkaTs(int value) {
      validate(fields()[5], value);
      this.sended_to_kafka_ts = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'sended_to_kafka_ts' field has been set.
      * @return True if the 'sended_to_kafka_ts' field has been set, false otherwise.
      */
    public boolean hasSendedToKafkaTs() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'sended_to_kafka_ts' field.
      * @return This builder.
      */
    public schemaregistry.GreenRideRecord.Builder clearSendedToKafkaTs() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public GreenRideRecord build() {
      try {
        GreenRideRecord record = new GreenRideRecord();
        record.pickup_datetime = fieldSetFlags()[0] ? this.pickup_datetime : (java.lang.String) defaultValue(fields()[0]);
        record.dropoff_datetime = fieldSetFlags()[1] ? this.dropoff_datetime : (java.lang.String) defaultValue(fields()[1]);
        record.vendor_id = fieldSetFlags()[2] ? this.vendor_id : (java.lang.String) defaultValue(fields()[2]);
        record.pickup_location_id = fieldSetFlags()[3] ? this.pickup_location_id : (java.lang.Integer) defaultValue(fields()[3]);
        record.dropoff_location_id = fieldSetFlags()[4] ? this.dropoff_location_id : (java.lang.Integer) defaultValue(fields()[4]);
        record.sended_to_kafka_ts = fieldSetFlags()[5] ? this.sended_to_kafka_ts : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<GreenRideRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<GreenRideRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<GreenRideRecord>
    READER$ = (org.apache.avro.io.DatumReader<GreenRideRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.pickup_datetime);

    out.writeString(this.dropoff_datetime);

    out.writeString(this.vendor_id);

    out.writeInt(this.pickup_location_id);

    out.writeInt(this.dropoff_location_id);

    out.writeInt(this.sended_to_kafka_ts);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.pickup_datetime = in.readString();

      this.dropoff_datetime = in.readString();

      this.vendor_id = in.readString();

      this.pickup_location_id = in.readInt();

      this.dropoff_location_id = in.readInt();

      this.sended_to_kafka_ts = in.readInt();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.pickup_datetime = in.readString();
          break;

        case 1:
          this.dropoff_datetime = in.readString();
          break;

        case 2:
          this.vendor_id = in.readString();
          break;

        case 3:
          this.pickup_location_id = in.readInt();
          break;

        case 4:
          this.dropoff_location_id = in.readInt();
          break;

        case 5:
          this.sended_to_kafka_ts = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










